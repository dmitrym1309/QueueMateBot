import telebot
import sqlite3
import threading
import time
from config import BOT_TOKEN, MESSAGES
import database as db
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
from telebot import types  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
bot_running = True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def handle_error(message, error, operation):
    error_text = str(error)
    logger.error(f"Error during {operation}: {error_text}", exc_info=True)
    bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ {operation}: {error_text}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, MESSAGES['welcome'], parse_mode="Markdown")
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def send_help(message):
    bot.reply_to(message, MESSAGES['help'], parse_mode="Markdown")
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
@bot.message_handler(func=lambda message: message.text and '@QueueMateBot' in message.text)
def handle_mention(message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
    chat_id = message.chat.id
    queues = db.get_all_queues(chat_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
    response = "üëã *–ü—Ä–∏–≤–µ—Ç! –Ø QueueMateBot - –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—è–º–∏.*\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—á–µ—Ä–µ–¥—è—Ö
    if queues:
        response += "*–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:*\n"
        for name, count in queues:
            response += f"üìã {name} - {count} —É—á–∞—Å—Ç–Ω–∏–∫(–æ–≤)\n"
        response += "\n"
    else:
        response += "*–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–µ–π.*\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º
    response += "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
    response += "`/view` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π\n"
    response += "`/join [–Ω–∞–∑–≤–∞–Ω–∏–µ]` - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏\n"
    response += "`/exit [–Ω–∞–∑–≤–∞–Ω–∏–µ]` - –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏\n"
    response += "`/help` - –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    
    bot.reply_to(message, response, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create
@bot.message_handler(commands=['create'])
def create_queue(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /create
        command_parts = message.text.split(' ', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        if len(command_parts) < 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏. –ü—Ä–∏–º–µ—Ä: /create –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
            return
        
        queue_name = command_parts[1].strip()
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        chat_member = bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['administrator', 'creator']:
            bot.reply_to(message, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥–∏.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_chat(chat_id, message.chat.title)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user_name = message.from_user.username or ""
        update_user_info(user_id, user_name, message.from_user.first_name, message.from_user.last_name)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å
        db.create_queue(queue_name, chat_id, user_id)
        
        bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '*{queue_name}*' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/join {queue_name}` —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.", parse_mode="Markdown")
    
    except sqlite3.IntegrityError:
        bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{queue_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
    except Exception as e:
        handle_error(message, e, "—Å–æ–∑–¥–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ –æ—á–µ—Ä–µ–¥–∏
def format_queue_info(queue_name, queue_id):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –æ—á–µ—Ä–µ–¥–∏
    creator_name = db.get_queue_creator(queue_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏
    queue_members = db.get_queue_members(queue_id)
    
    if not queue_members:
        return f"–û—á–µ—Ä–µ–¥—å '*{queue_name}*' –ø—É—Å—Ç–∞.\n–°–æ–∑–¥–∞—Ç–µ–ª—å: _{creator_name}_"
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å MESSAGE_TOO_LONG
    max_members_to_show = 50
    total_members = len(queue_members)
    
    if total_members > max_members_to_show:
        queue_members = queue_members[:max_members_to_show]
        
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ–∑ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è —á–∏—Å–µ–ª
    queue_list = "\n".join([
        f"{order}. {name} (@{username})" if username else f"{order}. {name}"
        for name, username, order, _ in queue_members
    ])
    
    result = f"–û—á–µ—Ä–µ–¥—å '*{queue_name}*'\n–°–æ–∑–¥–∞—Ç–µ–ª—å: _{creator_name}_\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_members}"
    
    if total_members > max_members_to_show:
        result += f"\n\n–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {max_members_to_show} –∏–∑ {total_members} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n{queue_list}"
    else:
        result += f"\n\n{queue_list}"
        
    return result

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é
def create_queue_keyboard(queue_name):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    join_button = types.InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"join_{queue_name}")
    exit_button = types.InlineKeyboardButton("–í—ã–π—Ç–∏", callback_data=f"exit_{queue_name}")
    rejoin_button = types.InlineKeyboardButton("–í –∫–æ–Ω–µ—Ü", callback_data=f"rejoin_{queue_name}")
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è" –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É
    keyboard.row(join_button)
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–í—ã–π—Ç–∏" –∏ "–í –∫–æ–Ω–µ—Ü" –≤–æ –≤—Ç–æ—Ä–æ–º —Ä—è–¥—É
    keyboard.row(exit_button, rejoin_button)
    
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /join
@bot.message_handler(commands=['join'])
def join_queue(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /join
        command_parts = message.text.split(' ', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        if len(command_parts) < 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏. –ü—Ä–∏–º–µ—Ä: `/join –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞`", parse_mode="Markdown")
            return
        
        queue_name = command_parts[1].strip()
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user_name = message.from_user.username or ""
        update_user_info(user_id, user_name, message.from_user.first_name, message.from_user.last_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        queue_id = db.get_queue_id(queue_name, chat_id)
        if not queue_id:
            bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
        if db.check_user_in_queue(queue_id, user_id):
            bot.reply_to(message, f"–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å
        db.add_user_to_queue(queue_id, user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—á–µ—Ä–µ–¥–∏
        queue_info = format_queue_info(queue_name, queue_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = create_queue_keyboard(queue_name)
        
        bot.reply_to(message, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –æ—á–µ—Ä–µ–¥–∏ '*{queue_name}*'!\n\n{queue_info}", parse_mode="Markdown", reply_markup=keyboard)
    
    except Exception as e:
        handle_error(message, e, "–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –æ—á–µ—Ä–µ–¥–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /exit
@bot.message_handler(commands=['exit'])
def exit_queue(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /exit
        command_parts = message.text.split(' ', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        if len(command_parts) < 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏. –ü—Ä–∏–º–µ—Ä: `/exit –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞`", parse_mode="Markdown")
            return
        
        queue_name = command_parts[1].strip()
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        queue_id = db.get_queue_id(queue_name, chat_id)
        if not queue_id:
            bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
        user_order = db.check_user_in_queue(queue_id, user_id)
        if not user_order:
            bot.reply_to(message, f"–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.")
            return
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        db.remove_user_from_queue(queue_id, user_id, user_order)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏
        queue_members = db.get_queue_members(queue_id)
        
        if queue_members:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—á–µ—Ä–µ–¥–∏
            queue_info = format_queue_info(queue_name, queue_id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = create_queue_keyboard(queue_name)
            
            bot.reply_to(message, f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ '*{queue_name}*'.\n\n{queue_info}", parse_mode="Markdown", reply_markup=keyboard)
        else:
            bot.reply_to(message, f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.\n–û—á–µ—Ä–µ–¥—å —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞.")
    
    except Exception as e:
        handle_error(message, e, "–≤—ã—Ö–æ–¥–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rejoin
@bot.message_handler(commands=['rejoin'])
def rejoin_queue(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /rejoin
        command_parts = message.text.split(' ', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        if len(command_parts) < 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏. –ü—Ä–∏–º–µ—Ä: `/rejoin –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞`", parse_mode="Markdown")
            return
        
        queue_name = command_parts[1].strip()
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        queue_id = db.get_queue_id(queue_name, chat_id)
        if not queue_id:
            bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
        user_order = db.check_user_in_queue(queue_id, user_id)
        if not user_order:
            bot.reply_to(message, f"–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ '*{queue_name}*'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/join {queue_name}` —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.", parse_mode="Markdown")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é rejoin_queue –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ —Ä—É—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        db.rejoin_queue(queue_id, user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—á–µ—Ä–µ–¥–∏
        queue_info = format_queue_info(queue_name, queue_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = create_queue_keyboard(queue_name)
        
        bot.reply_to(message, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏ '*{queue_name}*'.\n\n{queue_info}", parse_mode="Markdown", reply_markup=keyboard)
    
    except Exception as e:
        handle_error(message, e, "–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete
@bot.message_handler(commands=['delete'])
def delete_queue(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /delete
        command_parts = message.text.split(' ', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        if len(command_parts) < 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏. –ü—Ä–∏–º–µ—Ä: `/delete –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞`", parse_mode="Markdown")
            return
        
        queue_name = command_parts[1].strip()
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        chat_member = bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['administrator', 'creator']:
            bot.reply_to(message, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –æ—á–µ—Ä–µ–¥–∏.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        queue_id = db.get_queue_id(queue_name, chat_id)
        if not queue_id:
            bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        members_count = db.get_queue_members_count(queue_id)
        
        # –£–¥–∞–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å
        db.delete_queue(queue_id)
        
        bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. –ë—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ {members_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    
    except Exception as e:
        handle_error(message, e, "—É–¥–∞–ª–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /view
@bot.message_handler(commands=['view'])
def view_queue(message):
    try:
        chat_id = message.chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /view
        command_parts = message.text.split(' ', 1)
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ /view –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π –≤ –≥—Ä—É–ø–ø–µ
        if len(command_parts) < 2 or not command_parts[1].strip():
            queues = db.get_all_queues(chat_id)
            
            if not queues:
                bot.reply_to(message, "–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/create`.", parse_mode="Markdown")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—á–µ—Ä–µ–¥–µ–π
            queues_list = "\n".join([f"üìã {name} - {count} —É—á–∞—Å—Ç–Ω–∏–∫(–æ–≤)" for name, count in queues])
            
            bot.reply_to(message, f"–°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ:\n\n{queues_list}\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/view [–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏]`", parse_mode="Markdown")
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏, –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π
        else:
            queue_name = command_parts[1].strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
            queue_id = db.get_queue_id(queue_name, chat_id)
            if not queue_id:
                bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—á–µ—Ä–µ–¥–∏
            queue_info = format_queue_info(queue_name, queue_id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = create_queue_keyboard(queue_name)
            
            bot.reply_to(message, queue_info, parse_mode="Markdown", reply_markup=keyboard)
    
    except Exception as e:
        handle_error(message, e, "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—á–µ—Ä–µ–¥–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setname
@bot.message_handler(commands=['setname'])
def set_custom_name(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /setname
        command_parts = message.text.split(' ', 1)
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ /setname –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–º—è –Ω–∞ –∏–º—è –∏–∑ Telegram
        if len(command_parts) < 2:
            user_id = message.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
            telegram_name = message.from_user.first_name
            if message.from_user.last_name:
                telegram_name += " " + message.from_user.last_name
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db.update_user_display_name(user_id, telegram_name)
            
            bot.reply_to(message, f"–í–∞—à–µ –∏–º—è —Å–±—Ä–æ—à–µ–Ω–æ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–∑ Telegram: '{telegram_name}'!")
            return
        
        new_name = command_parts[1].strip()
        user_id = message.from_user.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.update_user_display_name(user_id, new_name)
        
        bot.reply_to(message, f"–í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_name}'!")
    
    except Exception as e:
        handle_error(message, e, "–∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ –æ—á–µ—Ä–µ–¥–∏
def format_queue_info(queue_name, queue_id):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –æ—á–µ—Ä–µ–¥–∏
    creator_name = db.get_queue_creator(queue_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏
    queue_members = db.get_queue_members(queue_id)
    
    if not queue_members:
        return f"–û—á–µ—Ä–µ–¥—å '*{queue_name}*' –ø—É—Å—Ç–∞.\n–°–æ–∑–¥–∞—Ç–µ–ª—å: _{creator_name}_"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º list comprehension
    queue_list = "\n".join(
        f"{order}. {name}" + (f" (@{username})" if username else "")
        for name, username, order, _ in queue_members
    )
    
    return f"–û—á–µ—Ä–µ–¥—å '*{queue_name}*'\n–°–æ–∑–¥–∞—Ç–µ–ª—å: _{creator_name}_\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(queue_members)}\n\n{queue_list}"

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def update_user_info(user_id, username, first_name, last_name):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    current_username, display_name = db.get_user_info(user_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∏–º—è
    if display_name:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ username, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        if current_username != username:
            db.cursor.execute("UPDATE Users SET username = ? WHERE user_id = ?", (username, user_id))
            db.connection.commit()
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –∏–º–µ–Ω–µ–º –∏–∑ Telegram
        display_name = first_name
        if last_name:
            display_name += " " + last_name
        db.add_or_update_user(user_id, username, display_name)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
def stop_bot():
    global bot_running
    logger.info("===== QueueMateBot stopping =====")
    bot_running = False
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –±–æ—Ç–∞
    bot.stop_polling()
    logger.info("Bot stopped")
    logger.info("=======================================")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
def console_listener():
    global bot_running
    logger.info("Console interface started. Available commands: stop, exit, quit, status")
    
    while bot_running:
        try:
            command = input().strip().lower()
            
            if command in ['stop', 'exit', 'quit']:
                logger.info("Stop command received from console")
                stop_bot()
                break
            elif command == 'status':
                logger.info(f"Bot status: {'running' if bot_running else 'stopped'}")
                print(f"Bot status: {'running' if bot_running else 'stopped'}")
            elif command == 'help':
                print("Available commands:")
                print("  stop, exit, quit - stop the bot")
                print("  status - check bot status")
                print("  help - show this help message")
            else:
                print(f"Unknown command: {command}")
                print("Type 'help' to see available commands")
        except Exception as e:
            logger.error(f"Error in console interface: {str(e)}", exc_info=True)
    
    logger.info("Console interface stopped")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        data = call.data.split('_', 1)
        action = data[0]
        queue_name = data[1]
        
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user_name = call.from_user.username or ""
        update_user_info(user_id, user_name, call.from_user.first_name, call.from_user.last_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        queue_id = db.get_queue_id(queue_name, chat_id)
        if not queue_id:
            bot.answer_callback_query(call.id, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
        if action == "join":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
            if db.check_user_in_queue(queue_id, user_id):
                bot.answer_callback_query(call.id, f"–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å
            db.add_user_to_queue(queue_id, user_id)
            bot.answer_callback_query(call.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'!")
            
        elif action == "exit":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
            user_order = db.check_user_in_queue(queue_id, user_id)
            if not user_order:
                bot.answer_callback_query(call.id, f"–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.")
                return
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            db.remove_user_from_queue(queue_id, user_id, user_order)
            bot.answer_callback_query(call.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.")
            
        elif action == "rejoin":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
            user_order = db.check_user_in_queue(queue_id, user_id)
            if not user_order:
                bot.answer_callback_query(call.id, f"–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å.")
                return
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏
            db.rejoin_queue(queue_id, user_id)
            bot.answer_callback_query(call.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—á–µ—Ä–µ–¥—å—é
        queue_info = format_queue_info(queue_name, queue_id)
        keyboard = create_queue_keyboard(queue_name)
        
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text=queue_info,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        except telebot.apihelper.ApiTelegramException as api_error:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message is not modified"
            if "message is not modified" in str(api_error):
                pass
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            elif "MESSAGE_TOO_LONG" in str(api_error):
                bot.send_message(
                    chat_id=chat_id,
                    text="–û—á–µ—Ä–µ–¥—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /view –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
                    reply_markup=keyboard
                )
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ API –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                
    except Exception as e:
        # –°–æ–∫—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å MESSAGE_TOO_LONG
        error_msg = str(e)
        if len(error_msg) > 50:
            error_msg = error_msg[:47] + "..."
            
        try:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {error_msg}")
        except:
            # –ï—Å–ª–∏ –¥–∞–∂–µ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            import traceback
            error_details = traceback.format_exc()
            print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback: {error_details}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def start_bot():
    global bot_running
    bot_running = True
    
    logger.info("===== QueueMateBot started =====")
    logger.info(f"Bot name: {bot.get_me().first_name}")
    logger.info(f"Bot username: @{bot.get_me().username}")
    logger.info(f"Bot ID: {bot.get_me().id}")
    logger.info("====================================")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
    console_thread = threading.Thread(target=console_listener, daemon=True)
    console_thread.start()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot.polling(none_stop=True, interval=1)
    except Exception as e:
        logger.error(f"Error during bot operation: {str(e)}", exc_info=True)
    finally:
        bot_running = False
        logger.info("Bot has finished working")
    
    return bot 