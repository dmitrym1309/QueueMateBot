import telebot
import sqlite3
import threading
import time
import os
import functools
import collections
from config import BOT_TOKEN, MESSAGES
import database as db
import logging
from telebot import types  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
bot_running = True

# –°–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ –∏ —Ñ–ª—É–¥–∞

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
command_usage = {}  # –î–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
chat_command_usage = {}  # –î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
join_queue_usage = {}  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –æ—á–µ—Ä–µ–¥–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
RATE_LIMITS = {
    'default': {'count': 5, 'period': 60},  # 5 –∫–æ–º–∞–Ω–¥ –≤ –º–∏–Ω—É—Ç—É –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    'join': {'count': 30, 'period': 60},    # 30 –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ –æ—á–µ—Ä–µ–¥–∏ –≤ –º–∏–Ω—É—Ç—É
    'chat': {'count': 30, 'period': 60}     # 30 –∫–æ–º–∞–Ω–¥ –≤ –º–∏–Ω—É—Ç—É –¥–ª—è –≤—Å–µ–≥–æ —á–∞—Ç–∞
}

def check_rate_limit(user_id, command_type='default', chat_id=None):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        command_type: –¢–∏–ø –∫–æ–º–∞–Ω–¥—ã ('default', 'join', 'chat')
        chat_id: ID —á–∞—Ç–∞ (–¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
        
    Returns:
        tuple: (is_limited, wait_time) - –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
    """
    current_time = time.time()
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ–≤–∞—Ä—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã
    if command_type == 'join':
        usage_dict = join_queue_usage
        limit_settings = RATE_LIMITS['join']
    elif command_type == 'chat' and chat_id:
        usage_dict = chat_command_usage
        limit_settings = RATE_LIMITS['chat']
        key = str(chat_id)
    else:
        usage_dict = command_usage
        limit_settings = RATE_LIMITS['default']
        key = str(user_id)
    
    # –î–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if command_type != 'chat':
        key = str(user_id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫, –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç
    if key not in usage_dict:
        usage_dict[key] = collections.deque()
    
    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    while usage_dict[key] and current_time - usage_dict[key][0] > limit_settings['period']:
        usage_dict[key].popleft()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç
    if len(usage_dict[key]) >= limit_settings['count']:
        # –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –¥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å–ª–æ—Ç–∞
        wait_time = int(usage_dict[key][0] + limit_settings['period'] - current_time) + 1
        return True, wait_time
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
    usage_dict[key].append(current_time)
    return False, 0

def rate_limit_decorator(command_type='default'):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥.
    
    Args:
        command_type: –¢–∏–ø –∫–æ–º–∞–Ω–¥—ã ('default', 'join', 'chat')
        
    Returns:
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(message, *args, **kwargs):
            user_id = message.from_user.id
            chat_id = message.chat.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            is_limited, wait_time = check_rate_limit(user_id, command_type)
            
            if is_limited:
                logger.warning(f"Rate limit exceeded for user {user_id}, command type {command_type}")
                try:
                    safe_reply_to(message, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫.")
                except Exception as e:
                    logger.error(f"Failed to send rate limit message: {str(e)}")
                return
            
            # –î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ –æ–±—â–µ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Ç–∞
            if message.chat.type in ['group', 'supergroup']:
                is_chat_limited, chat_wait_time = check_rate_limit(None, 'chat', chat_id)
                
                if is_chat_limited:
                    logger.warning(f"Chat rate limit exceeded for chat {chat_id}")
                    # –î–ª—è —á–∞—Ç–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                    return
            
            # –ï—Å–ª–∏ –ª–∏–º–∏—Ç—ã –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            return func(message, *args, **kwargs)
        return wrapper
    return decorator

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
def retry_on_rate_limit(max_retries=3, initial_delay=1):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            retries = 0
            delay = initial_delay
            
            while retries <= max_retries:
                try:
                    return func(*args, **kwargs)
                except telebot.apihelper.ApiTelegramException as e:
                    if "Too Many Requests" in str(e) or e.error_code == 429:
                        retry_after = delay
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
                        if hasattr(e, 'result') and isinstance(e.result, dict):
                            if 'parameters' in e.result and 'retry_after' in e.result['parameters']:
                                retry_after = e.result['parameters']['retry_after']
                        
                        if retries < max_retries:
                            logger.warning(f"Rate limit exceeded. Retry {retries+1}/{max_retries} after {retry_after} seconds")
                            time.sleep(retry_after)
                            retries += 1
                            delay *= 2  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏
                        else:
                            logger.error(f"Max retries exceeded for rate limit. Giving up.")
                            raise
                    else:
                        # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ API –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
                        raise
        return wrapper
    return decorator

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Telegram
@retry_on_rate_limit()
def safe_send_message(chat_id, text, **kwargs):
    return bot.send_message(chat_id, text, **kwargs)

@retry_on_rate_limit()
def safe_edit_message_text(chat_id, message_id, text, **kwargs):
    return bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, **kwargs)

@retry_on_rate_limit()
def safe_answer_callback_query(callback_query_id, text, **kwargs):
    return bot.answer_callback_query(callback_query_id, text, **kwargs)

@retry_on_rate_limit()
def safe_reply_to(message, text, **kwargs):
    return bot.reply_to(message, text, **kwargs)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def handle_error(message, error, operation):
    error_text = str(error)
    logger.error(f"Error during {operation}: {error_text}", exc_info=True)
    try:
        safe_reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ {operation}: {error_text}")
    except Exception as e:
        logger.error(f"Failed to send error message: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
@rate_limit_decorator('default')
def send_welcome(message):
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user_id = message.from_user.id
        username = message.from_user.username or ""
        update_user_info(user_id, username, message.from_user.first_name, message.from_user.last_name)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        safe_reply_to(message, MESSAGES['welcome'], parse_mode="Markdown")
    except Exception as e:
        handle_error(message, e, "–æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
@rate_limit_decorator('default')
def send_help(message):
    try:
        safe_reply_to(message, MESSAGES['help'], parse_mode="Markdown")
    except Exception as e:
        handle_error(message, e, "–æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø—Ä–∞–≤–∫–∏")
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
@bot.message_handler(func=lambda message: message.text and '@QueueMateBot' in message.text)
@rate_limit_decorator('default')
def handle_mention(message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
    chat_id = message.chat.id
    queues = db.get_all_queues(chat_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
    response = "üëã *–ü—Ä–∏–≤–µ—Ç! –Ø QueueMateBot - –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—è–º–∏.*\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—á–µ—Ä–µ–¥—è—Ö
    if queues:
        response += "*–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:*\n"
        for name, count in queues:
            response += f"üìã {name} - {count} —É—á–∞—Å—Ç–Ω–∏–∫(–æ–≤)\n"
        response += "\n"
    else:
        response += "*–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–µ–π.*\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º
    response += "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
    response += "`/view` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π\n"
    response += "`/join [–Ω–∞–∑–≤–∞–Ω–∏–µ]` - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏\n"
    response += "`/exit [–Ω–∞–∑–≤–∞–Ω–∏–µ]` - –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏\n"
    response += "`/help` - –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    
    bot.reply_to(message, response, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create
@bot.message_handler(commands=['create'])
@rate_limit_decorator('default')
def create_queue(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /create
        command_parts = message.text.split(' ', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        if len(command_parts) < 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏. –ü—Ä–∏–º–µ—Ä: /create –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
            return
        
        queue_name = command_parts[1].strip()
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        chat_member = bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['administrator', 'creator']:
            bot.reply_to(message, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥–∏.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_chat(chat_id, message.chat.title)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user_name = message.from_user.username or ""
        update_user_info(user_id, user_name, message.from_user.first_name, message.from_user.last_name)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å
        db.create_queue(queue_name, chat_id, user_id)
        
        bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '*{queue_name}*' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/join {queue_name}` —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.", parse_mode="Markdown")
    
    except sqlite3.IntegrityError:
        bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{queue_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
    except Exception as e:
        handle_error(message, e, "—Å–æ–∑–¥–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ –æ—á–µ—Ä–µ–¥–∏
def format_queue_info(queue_name, queue_id):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –æ—á–µ—Ä–µ–¥–∏
    creator_name = db.get_queue_creator(queue_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏
    queue_members = db.get_queue_members(queue_id)
    
    if not queue_members:
        return f"–û—á–µ—Ä–µ–¥—å '*{queue_name}*' –ø—É—Å—Ç–∞.\n–°–æ–∑–¥–∞—Ç–µ–ª—å: _{creator_name}_"
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    max_members_to_show = 50
    total_members = len(queue_members)
    
    if total_members > max_members_to_show:
        queue_members = queue_members[:max_members_to_show]
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    queue_list = []
    for name, username, order, _ in queue_members:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏
        safe_name = name.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`').replace('[', '\\[')
        
        if username:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ username
            safe_username = username.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`').replace('[', '\\[')
            queue_list.append(f"{order}. {safe_name} (@{safe_username})")
        else:
            queue_list.append(f"{order}. {safe_name}")
    
    # –°–æ–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É
    queue_list_text = "\n".join(queue_list)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    safe_creator_name = creator_name.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`').replace('[', '\\[')
    
    result = f"–û—á–µ—Ä–µ–¥—å '*{queue_name}*'\n–°–æ–∑–¥–∞—Ç–µ–ª—å: _{safe_creator_name}_\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_members}"
    
    if total_members > max_members_to_show:
        result += f"\n\n–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {max_members_to_show} –∏–∑ {total_members} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n{queue_list_text}"
    else:
        result += f"\n\n{queue_list_text}"
    
    return result

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é
def create_queue_keyboard(queue_name):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    join_button = types.InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"join_{queue_name}")
    exit_button = types.InlineKeyboardButton("–í—ã–π—Ç–∏", callback_data=f"exit_{queue_name}")
    rejoin_button = types.InlineKeyboardButton("–í –∫–æ–Ω–µ—Ü", callback_data=f"rejoin_{queue_name}")
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è" –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É
    keyboard.row(join_button)
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–í—ã–π—Ç–∏" –∏ "–í –∫–æ–Ω–µ—Ü" –≤–æ –≤—Ç–æ—Ä–æ–º —Ä—è–¥—É
    keyboard.row(exit_button, rejoin_button)
    
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /join
@bot.message_handler(commands=['join'])
@rate_limit_decorator('join')
def join_queue(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /join
        command_parts = message.text.split(' ', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        if len(command_parts) < 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏. –ü—Ä–∏–º–µ—Ä: `/join –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞`", parse_mode="Markdown")
            return
        
        queue_name = command_parts[1].strip()
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user_name = message.from_user.username or ""
        update_user_info(user_id, user_name, message.from_user.first_name, message.from_user.last_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        queue_id = db.get_queue_id(queue_name, chat_id)
        if not queue_id:
            bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
        if db.check_user_in_queue(queue_id, user_id):
            bot.reply_to(message, f"–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å
        db.add_user_to_queue(queue_id, user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—á–µ—Ä–µ–¥–∏
        queue_info = format_queue_info(queue_name, queue_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = create_queue_keyboard(queue_name)
        
        bot.reply_to(message, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –æ—á–µ—Ä–µ–¥–∏ '*{queue_name}*'!\n\n{queue_info}", parse_mode="Markdown", reply_markup=keyboard)
    
    except Exception as e:
        handle_error(message, e, "–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –æ—á–µ—Ä–µ–¥–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /exit
@bot.message_handler(commands=['exit'])
@rate_limit_decorator('default')
def exit_queue(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /exit
        command_parts = message.text.split(' ', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        if len(command_parts) < 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏. –ü—Ä–∏–º–µ—Ä: `/exit –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞`", parse_mode="Markdown")
            return
        
        queue_name = command_parts[1].strip()
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        queue_id = db.get_queue_id(queue_name, chat_id)
        if not queue_id:
            bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
        user_order = db.check_user_in_queue(queue_id, user_id)
        if not user_order:
            bot.reply_to(message, f"–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.")
            return
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        db.remove_user_from_queue(queue_id, user_id, user_order)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏
        queue_members = db.get_queue_members(queue_id)
        
        if queue_members:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—á–µ—Ä–µ–¥–∏
            queue_info = format_queue_info(queue_name, queue_id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = create_queue_keyboard(queue_name)
            
            bot.reply_to(message, f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ '*{queue_name}*'.\n\n{queue_info}", parse_mode="Markdown", reply_markup=keyboard)
        else:
            bot.reply_to(message, f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.\n–û—á–µ—Ä–µ–¥—å —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞.")
    
    except Exception as e:
        handle_error(message, e, "–≤—ã—Ö–æ–¥–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rejoin
@bot.message_handler(commands=['rejoin'])
@rate_limit_decorator('default')
def rejoin_queue(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /rejoin
        command_parts = message.text.split(' ', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        if len(command_parts) < 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏. –ü—Ä–∏–º–µ—Ä: `/rejoin –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞`", parse_mode="Markdown")
            return
        
        queue_name = command_parts[1].strip()
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        queue_id = db.get_queue_id(queue_name, chat_id)
        if not queue_id:
            bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
        user_order = db.check_user_in_queue(queue_id, user_id)
        if not user_order:
            bot.reply_to(message, f"–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ '*{queue_name}*'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/join {queue_name}` —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.", parse_mode="Markdown")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é rejoin_queue –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ —Ä—É—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        db.rejoin_queue(queue_id, user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—á–µ—Ä–µ–¥–∏
        queue_info = format_queue_info(queue_name, queue_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = create_queue_keyboard(queue_name)
        
        bot.reply_to(message, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏ '*{queue_name}*'.\n\n{queue_info}", parse_mode="Markdown", reply_markup=keyboard)
    
    except Exception as e:
        handle_error(message, e, "–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete
@bot.message_handler(commands=['delete'])
@rate_limit_decorator('default')
def delete_queue(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /delete
        command_parts = message.text.split(' ', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        if len(command_parts) < 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏. –ü—Ä–∏–º–µ—Ä: `/delete –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞`", parse_mode="Markdown")
            return
        
        queue_name = command_parts[1].strip()
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        chat_member = bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['administrator', 'creator']:
            bot.reply_to(message, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –æ—á–µ—Ä–µ–¥–∏.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        queue_id = db.get_queue_id(queue_name, chat_id)
        if not queue_id:
            bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        members_count = db.get_queue_members_count(queue_id)
        
        # –£–¥–∞–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å
        db.delete_queue(queue_id)
        
        bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. –ë—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ {members_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    
    except Exception as e:
        handle_error(message, e, "—É–¥–∞–ª–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /view
@bot.message_handler(commands=['view'])
@rate_limit_decorator('default')
def view_queue(message):
    try:
        chat_id = message.chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /view
        command_parts = message.text.split(' ', 1)
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ /view –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π –≤ –≥—Ä—É–ø–ø–µ
        if len(command_parts) < 2 or not command_parts[1].strip():
            queues = db.get_all_queues(chat_id)
            
            if not queues:
                bot.reply_to(message, "–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/create`.", parse_mode="Markdown")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—á–µ—Ä–µ–¥–µ–π
            queues_list = "\n".join([f"üìã {name} - {count} —É—á–∞—Å—Ç–Ω–∏–∫(–æ–≤)" for name, count in queues])
            
            bot.reply_to(message, f"–°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ:\n\n{queues_list}\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/view [–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏]`", parse_mode="Markdown")
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏, –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π
        else:
            queue_name = command_parts[1].strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
            queue_id = db.get_queue_id(queue_name, chat_id)
            if not queue_id:
                bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—á–µ—Ä–µ–¥–∏
            queue_info = format_queue_info(queue_name, queue_id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = create_queue_keyboard(queue_name)
            
            bot.reply_to(message, queue_info, parse_mode="Markdown", reply_markup=keyboard)
    
    except Exception as e:
        handle_error(message, e, "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—á–µ—Ä–µ–¥–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setname
@bot.message_handler(commands=['setname'])
@rate_limit_decorator('default')
def set_custom_name(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /setname
        command_parts = message.text.split(' ', 1)
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ /setname –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–º—è –Ω–∞ –∏–º—è –∏–∑ Telegram
        if len(command_parts) < 2:
            user_id = message.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
            telegram_name = message.from_user.first_name
            if message.from_user.last_name:
                telegram_name += " " + message.from_user.last_name
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db.update_user_display_name(user_id, telegram_name)
            
            bot.reply_to(message, f"–í–∞—à–µ –∏–º—è —Å–±—Ä–æ—à–µ–Ω–æ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–∑ Telegram: '{telegram_name}'!")
            return
        
        new_name = command_parts[1].strip()
        user_id = message.from_user.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.update_user_display_name(user_id, new_name)
        
        bot.reply_to(message, f"–í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_name}'!")
    
    except Exception as e:
        handle_error(message, e, "–∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ –æ—á–µ—Ä–µ–¥–∏
def format_queue_info(queue_name, queue_id):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –æ—á–µ—Ä–µ–¥–∏
    creator_name = db.get_queue_creator(queue_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏
    queue_members = db.get_queue_members(queue_id)
    
    if not queue_members:
        return f"–û—á–µ—Ä–µ–¥—å '*{queue_name}*' –ø—É—Å—Ç–∞.\n–°–æ–∑–¥–∞—Ç–µ–ª—å: _{creator_name}_"
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    max_members_to_show = 50
    total_members = len(queue_members)
    
    if total_members > max_members_to_show:
        queue_members = queue_members[:max_members_to_show]
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    queue_list = []
    for name, username, order, _ in queue_members:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏
        safe_name = name.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`').replace('[', '\\[')
        
        if username:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ username
            safe_username = username.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`').replace('[', '\\[')
            queue_list.append(f"{order}. {safe_name} (@{safe_username})")
        else:
            queue_list.append(f"{order}. {safe_name}")
    
    # –°–æ–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É
    queue_list_text = "\n".join(queue_list)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    safe_creator_name = creator_name.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`').replace('[', '\\[')
    
    result = f"–û—á–µ—Ä–µ–¥—å '*{queue_name}*'\n–°–æ–∑–¥–∞—Ç–µ–ª—å: _{safe_creator_name}_\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_members}"
    
    if total_members > max_members_to_show:
        result += f"\n\n–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {max_members_to_show} –∏–∑ {total_members} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n{queue_list_text}"
    else:
        result += f"\n\n{queue_list_text}"
    
    return result

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def update_user_info(user_id, username, first_name, last_name):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    current_username, display_name = db.get_user_info(user_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∏–º—è
    if display_name:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ username, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        if current_username != username:
            db.cursor.execute("UPDATE Users SET username = ? WHERE user_id = ?", (username, user_id))
            db.connection.commit()
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –∏–º–µ–Ω–µ–º –∏–∑ Telegram
        display_name = first_name
        if last_name:
            display_name += " " + last_name
        db.add_or_update_user(user_id, username, display_name)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
def stop_bot():
    global bot_running
    logger.info("===== QueueMateBot stopping =====")
    bot_running = False
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –±–æ—Ç–∞
    bot.stop_polling()
    logger.info("Bot stopped")
    logger.info("=======================================")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
def console_listener():
    global bot_running
    logger.info("Console interface started. Available commands: stop, exit, quit, status")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç —á–µ—Ä–µ–∑ systemd
    is_systemd = os.environ.get('INVOCATION_ID') is not None or os.environ.get('JOURNAL_STREAM') is not None
    
    if is_systemd:
        logger.info("Running under systemd, console input disabled")
        # –í —Ä–µ–∂–∏–º–µ systemd –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º, –ø–æ–∫–∞ –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        while bot_running:
            time.sleep(1)
        return
    
    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å —á—Ç–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
    while bot_running:
        try:
            command = input().strip().lower()
            
            if command in ['stop', 'exit', 'quit']:
                logger.info("Stop command received from console")
                stop_bot()
                break
            elif command == 'status':
                logger.info(f"Bot status: {'running' if bot_running else 'stopped'}")
                print(f"Bot status: {'running' if bot_running else 'stopped'}")
            elif command == 'help':
                print("Available commands:")
                print("  stop, exit, quit - stop the bot")
                print("  status - check bot status")
                print("  help - show this help message")
            else:
                print(f"Unknown command: {command}")
                print("Type 'help' to see available commands")
        except EOFError:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            logger.warning("Standard input not available, console interface disabled")
            break
        except Exception as e:
            logger.error(f"Error in console interface: {str(e)}", exc_info=True)
    
    logger.info("Console interface stopped")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        data = call.data
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        # –î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –æ—á–µ—Ä–µ–¥–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if data.startswith('join_'):
            is_limited, wait_time = check_rate_limit(user_id, 'join')
        else:
            is_limited, wait_time = check_rate_limit(user_id, 'default')
        
        if is_limited:
            logger.warning(f"Rate limit exceeded for user {user_id} in callback query")
            try:
                safe_answer_callback_query(call.id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {wait_time} —Å–µ–∫.")
            except Exception as e:
                logger.error(f"Failed to send rate limit message via callback: {str(e)}")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        update_user_info(user_id, call.from_user.username, call.from_user.first_name, call.from_user.last_name)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –æ—á–µ—Ä–µ–¥–∏
        if data.startswith('join_'):
            queue_name = data[5:]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
            
            # –ü–æ–ª—É—á–∞–µ–º ID –æ—á–µ—Ä–µ–¥–∏
            queue_id = db.get_queue_id(queue_name, chat_id)
            if not queue_id:
                try:
                    safe_answer_callback_query(call.id, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return
                except Exception as e:
                    logger.error(f"Error answering callback query: {str(e)}")
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏
            if db.check_user_in_queue(queue_id, user_id):
                try:
                    safe_answer_callback_query(call.id, f"–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.")
                    return
                except Exception as e:
                    logger.error(f"Error answering callback query: {str(e)}")
                    return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å
            try:
                db.add_user_to_queue(queue_id, user_id)
                safe_answer_callback_query(call.id, f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.")
            except Exception as e:
                logger.error(f"Error adding user to queue: {str(e)}")
                try:
                    safe_answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –æ—á–µ—Ä–µ–¥–∏: {str(e)}")
                except Exception:
                    logger.error("Failed to send error message via callback")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—á–µ—Ä–µ–¥—å—é
            queue_info = format_queue_info(queue_name, queue_id)
            keyboard = create_queue_keyboard(queue_name)
            
            try:
                safe_edit_message_text(
                    chat_id=chat_id,
                    message_id=call.message.message_id,
                    text=queue_info,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
            except telebot.apihelper.ApiTelegramException as api_error:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message is not modified"
                if "message is not modified" in str(api_error):
                    pass
                else:
                    logger.error(f"Error updating message: {str(api_error)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        elif data.startswith('exit_'):
            queue_name = data[5:]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
            
            # –ü–æ–ª—É—á–∞–µ–º ID –æ—á–µ—Ä–µ–¥–∏
            queue_id = db.get_queue_id(queue_name, chat_id)
            if not queue_id:
                try:
                    safe_answer_callback_query(call.id, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return
                except Exception as e:
                    logger.error(f"Error answering callback query: {str(e)}")
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏
            user_order = None
            for _, _, order, uid in db.get_queue_members(queue_id):
                if uid == user_id:
                    user_order = order
                    break
            
            if not user_order:
                try:
                    safe_answer_callback_query(call.id, f"–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.")
                    return
                except Exception as e:
                    logger.error(f"Error answering callback query: {str(e)}")
                    return
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            try:
                db.remove_user_from_queue(queue_id, user_id, user_order)
                safe_answer_callback_query(call.id, f"–í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.")
            except Exception as e:
                logger.error(f"Error removing user from queue: {str(e)}")
                try:
                    safe_answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {str(e)}")
                except Exception:
                    logger.error("Failed to send error message via callback")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—á–µ—Ä–µ–¥—å—é
            queue_info = format_queue_info(queue_name, queue_id)
            keyboard = create_queue_keyboard(queue_name)
            
            try:
                safe_edit_message_text(
                    chat_id=chat_id,
                    message_id=call.message.message_id,
                    text=queue_info,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
            except telebot.apihelper.ApiTelegramException as api_error:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message is not modified"
                if "message is not modified" in str(api_error):
                    pass
                else:
                    logger.error(f"Error updating message: {str(api_error)}")
    
    except Exception as e:
        # –°–æ–∫—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å MESSAGE_TOO_LONG
        error_msg = str(e)
        if len(error_msg) > 50:
            error_msg = error_msg[:47] + "..."
            
        try:
            safe_answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {error_msg}")
        except Exception as callback_error:
            logger.error(f"Error answering callback query about error: {str(callback_error)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–ª–æ–≤–∞—Ä–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
def cleanup_command_usage():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –æ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π.
    """
    while bot_running:
        try:
            current_time = time.time()
            
            # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            for user_id in list(command_usage.keys()):
                while command_usage[user_id] and current_time - command_usage[user_id][0] > RATE_LIMITS['default']['period']:
                    command_usage[user_id].popleft()
                if not command_usage[user_id]:
                    del command_usage[user_id]
            
            # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ –æ—á–µ—Ä–µ–¥–∏
            for user_id in list(join_queue_usage.keys()):
                while join_queue_usage[user_id] and current_time - join_queue_usage[user_id][0] > RATE_LIMITS['join']['period']:
                    join_queue_usage[user_id].popleft()
                if not join_queue_usage[user_id]:
                    del join_queue_usage[user_id]
            
            # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
            for chat_id in list(chat_command_usage.keys()):
                while chat_command_usage[chat_id] and current_time - chat_command_usage[chat_id][0] > RATE_LIMITS['chat']['period']:
                    chat_command_usage[chat_id].popleft()
                if not chat_command_usage[chat_id]:
                    del chat_command_usage[chat_id]
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            logger.debug(f"Command usage stats: users={len(command_usage)}, joins={len(join_queue_usage)}, chats={len(chat_command_usage)}")
            
        except Exception as e:
            logger.error(f"Error in cleanup_command_usage: {str(e)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        time.sleep(300)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def start_bot():
    global bot_running
    bot_running = True
    
    logger.info("===== QueueMateBot started =====")
    logger.info(f"Bot name: {bot.get_me().first_name}")
    logger.info(f"Bot username: @{bot.get_me().username}")
    logger.info(f"Bot ID: {bot.get_me().id}")
    logger.info("====================================")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç —á–µ—Ä–µ–∑ systemd
    is_systemd = os.environ.get('INVOCATION_ID') is not None or os.environ.get('JOURNAL_STREAM') is not None
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏, –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ systemd
    if not is_systemd:
        console_thread = threading.Thread(target=console_listener, daemon=True)
        console_thread.start()
        logger.info("Console interface started")
    else:
        logger.info("Running under systemd, console interface disabled")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ª–æ–≤–∞—Ä–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
    cleanup_thread = threading.Thread(target=cleanup_command_usage, daemon=True)
    cleanup_thread.start()
    logger.info("Command usage cleanup thread started")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        bot.polling(none_stop=True, interval=3, timeout=30)
    except Exception as e:
        logger.error(f"Error during bot operation: {str(e)}", exc_info=True)
    finally:
        bot_running = False
        logger.info("Bot has finished working")
    
    return bot

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove - —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@bot.message_handler(commands=['remove'])
@rate_limit_decorator('default')
def remove_user_admin(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /remove
        command_parts = message.text.split(' ', 2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω—ã –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if len(command_parts) < 3:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username. –ü—Ä–∏–º–µ—Ä: `/remove –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ @username` –∏–ª–∏ `/remove –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ò–≤–∞–Ω`", parse_mode="Markdown")
            return
        
        queue_name = command_parts[1].strip()
        user_identifier = command_parts[2].strip()
        chat_id = message.chat.id
        admin_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        chat_member = bot.get_chat_member(chat_id, admin_id)
        if chat_member.status not in ['administrator', 'creator']:
            bot.reply_to(message, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        queue_id = db.get_queue_id(queue_name, chat_id)
        if not queue_id:
            bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏
        queue_members = db.get_queue_members(queue_id)
        if not queue_members:
            bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –ø—É—Å—Ç–∞.")
            return
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É (–∏–º—è –∏–ª–∏ @username)
        user_found = False
        user_id = None
        user_order = None
        user_name = None
        
        for name, username, order, uid in queue_members:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ username (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å @ –∏–ª–∏ –±–µ–∑)
            if username and (user_identifier.lower() == username.lower() or 
                            user_identifier.lower() == f"@{username}".lower()):
                user_found = True
                user_id = uid
                user_order = order
                user_name = name
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
            if name.lower() == user_identifier.lower():
                user_found = True
                user_id = uid
                user_order = order
                user_name = name
                break
        
        if not user_found:
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.")
            return
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        db.remove_user_from_queue(queue_id, user_id, user_order)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—á–µ—Ä–µ–¥–∏
        queue_info = format_queue_info(queue_name, queue_id)
        
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.\n\n{queue_info}", parse_mode="Markdown")
        logger.info(f"Admin {admin_id} removed user {user_id} ({user_name}) from queue '{queue_name}'")
    
    except Exception as e:
        handle_error(message, e, "—É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setposition - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
@bot.message_handler(commands=['setposition'])
@rate_limit_decorator('default')
def set_user_position(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /setposition
        command_parts = message.text.split(' ', 3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω—ã –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if len(command_parts) < 4:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username –∏ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é. –ü—Ä–∏–º–µ—Ä: `/setposition –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ @username 1` –∏–ª–∏ `/setposition –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ò–≤–∞–Ω 3`", parse_mode="Markdown")
            return
        
        queue_name = command_parts[1].strip()
        user_identifier = command_parts[2].strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è - —á–∏—Å–ª–æ
        try:
            new_position = int(command_parts[3].strip())
            if new_position < 1:
                bot.reply_to(message, "–ü–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
        except ValueError:
            bot.reply_to(message, "–ü–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        
        chat_id = message.chat.id
        admin_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        chat_member = bot.get_chat_member(chat_id, admin_id)
        if chat_member.status not in ['administrator', 'creator']:
            bot.reply_to(message, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        queue_id = db.get_queue_id(queue_name, chat_id)
        if not queue_id:
            bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏
        queue_members = db.get_queue_members(queue_id)
        if not queue_members:
            bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –ø—É—Å—Ç–∞.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if new_position > len(queue_members):
            bot.reply_to(message, f"–ü–æ–∑–∏—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ({len(queue_members)}).")
            return
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É (–∏–º—è –∏–ª–∏ @username)
        user_found = False
        user_id = None
        user_order = None
        user_name = None
        
        for name, username, order, uid in queue_members:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ username (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å @ –∏–ª–∏ –±–µ–∑)
            if username and (user_identifier.lower() == username.lower() or 
                            user_identifier.lower() == f"@{username}".lower()):
                user_found = True
                user_id = uid
                user_order = order
                user_name = name
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
            if name.lower() == user_identifier.lower():
                user_found = True
                user_id = uid
                user_order = order
                user_name = name
                break
        
        if not user_found:
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.")
            return
        
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–æ–≤–æ–π, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if user_order == new_position:
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {new_position}.")
            return
        
        # –ò–∑–º–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥–∏
        with db.db_lock:
            # –í—Ä–µ–º–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            db.cursor.execute("DELETE FROM QueueMembers WHERE queue_id = ? AND user_id = ?", 
                            (queue_id, user_id))
            
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤–≤–µ—Ä—Ö (–Ω–∞ –º–µ–Ω—å—à—É—é –ø–æ–∑–∏—Ü–∏—é)
            if new_position < user_order:
                db.cursor.execute("""
                    UPDATE QueueMembers 
                    SET join_order = join_order + 1 
                    WHERE queue_id = ? AND join_order >= ? AND join_order < ?
                """, (queue_id, new_position, user_order))
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤–Ω–∏–∑ (–Ω–∞ –±–æ–ª—å—à—É—é –ø–æ–∑–∏—Ü–∏—é)
            else:
                db.cursor.execute("""
                    UPDATE QueueMembers 
                    SET join_order = join_order - 1 
                    WHERE queue_id = ? AND join_order > ? AND join_order <= ?
                """, (queue_id, user_order, new_position))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
            db.cursor.execute("INSERT INTO QueueMembers (queue_id, user_id, join_order) VALUES (?, ?, ?)", 
                            (queue_id, user_id, new_position))
            
            db.connection.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—á–µ—Ä–µ–¥–∏
        queue_info = format_queue_info(queue_name, queue_id)
        
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {new_position} –≤ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.\n\n{queue_info}", parse_mode="Markdown")
        logger.info(f"Admin {admin_id} moved user {user_id} ({user_name}) to position {new_position} in queue '{queue_name}'")
    
    except Exception as e:
        handle_error(message, e, "–∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è") 