import telebot
import sqlite3
import threading

bot = telebot.TeleBot('7365658286:AAGQ7Ob2FUAH1Vpc0oLSrZebKth7xZ2M3e0')
# –†–∞–∑—Ä–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
connection = sqlite3.connect('botdb.db', check_same_thread=False)
cursor = connection.cursor()

# –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db_lock = threading.Lock()

cursor.execute('''
CREATE TABLE IF NOT EXISTS Chats (
    chat_id INTEGER PRIMARY KEY,
    chat_name TEXT)'''
)

cursor.execute('''
CREATE TABLE IF NOT EXISTS Users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    display_name TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS Queues (
    queue_id INTEGER PRIMARY KEY AUTOINCREMENT,
    queue_name TEXT,
    chat_id INTEGER,
    creator_id INTEGER,
    FOREIGN KEY (chat_id) REFERENCES Chats(chat_id),
    FOREIGN KEY (creator_id) REFERENCES Users(user_id),
    UNIQUE (queue_name, chat_id)  -- –û—á–µ—Ä–µ–¥—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –≤ –∫–∞–∂–¥–æ–π –±–µ—Å–µ–¥–µ
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS QueueMembers (
    queue_id INTEGER,
    user_id INTEGER,
    join_order INTEGER,
    PRIMARY KEY (queue_id, user_id),
    FOREIGN KEY (queue_id) REFERENCES Queues(queue_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
)
''')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = """
–ü—Ä–∏–≤–µ—Ç! –Ø QueueMateBot - –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—è–º–∏ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.

–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥–∏ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏.
"""
    bot.reply_to(message, welcome_text)
    
@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
üìã *–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/view - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π –≤ —á–∞—Ç–µ
/view [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –ø–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
/join [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏
/exit [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
/setname [–∏–º—è] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ—ë –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è

*–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*
/create [–Ω–∞–∑–≤–∞–Ω–∏–µ] - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å
/delete [–Ω–∞–∑–≤–∞–Ω–∏–µ] - —É–¥–∞–ª–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–æ–ª–Ω–æ—Å—Ç—å—é

*–ü—Ä–∏–º–µ—Ä—ã:*
/create –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
/join –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
/exit –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
/view - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏
/view –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
/delete –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - —É–¥–∞–ª–∏—Ç—å –æ—á–µ—Ä–µ–¥—å "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
/setname –ò–≤–∞–Ω - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è "–ò–≤–∞–Ω"
"""
    bot.reply_to(message, help_text, parse_mode="Markdown")
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
@bot.message_handler(func=lambda message: message.text and '@QueueMateBot' in message.text)
def handle_mention(message):
    bot.reply_to(message, "–í—ã —É–ø–æ–º—è–Ω—É–ª–∏ –º–µ–Ω—è! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")


@bot.message_handler(commands=['create'])
def create_queue(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /create
        command_parts = message.text.split(' ', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        if len(command_parts) < 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏. –ü—Ä–∏–º–µ—Ä: /create –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
            return
        
        queue_name = command_parts[1].strip()
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        chat_member = bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['administrator', 'creator']:
            bot.reply_to(message, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥–∏.")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with db_lock:
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü—É Chats, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            cursor.execute("INSERT OR IGNORE INTO Chats (chat_id, chat_name) VALUES (?, ?)", 
                          (chat_id, message.chat.title))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É Users, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            user_name = message.from_user.username or ""
            display_name = message.from_user.first_name
            if message.from_user.last_name:
                display_name += " " + message.from_user.last_name
                
            cursor.execute("INSERT OR IGNORE INTO Users (user_id, username, display_name) VALUES (?, ?, ?)", 
                          (user_id, user_name, display_name))
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å
            cursor.execute("INSERT INTO Queues (queue_name, chat_id, creator_id) VALUES (?, ?, ?)", 
                          (queue_name, chat_id, user_id))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            connection.commit()
        
        bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join {queue_name} —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.")
    
    except sqlite3.IntegrityError:
        bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{queue_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏: {str(e)}")
        with db_lock:
            connection.rollback()

@bot.message_handler(commands=['join'])
def join_queue(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /join
        command_parts = message.text.split(' ', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        if len(command_parts) < 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏. –ü—Ä–∏–º–µ—Ä: /join –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
            return
        
        queue_name = command_parts[1].strip()
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with db_lock:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É Users, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            user_name = message.from_user.username or ""
            display_name = message.from_user.first_name
            if message.from_user.last_name:
                display_name += " " + message.from_user.last_name
                
            cursor.execute("INSERT OR IGNORE INTO Users (user_id, username, display_name) VALUES (?, ?, ?)", 
                          (user_id, user_name, display_name))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
            cursor.execute("SELECT queue_id FROM Queues WHERE queue_name = ? AND chat_id = ?", 
                          (queue_name, chat_id))
            queue_result = cursor.fetchone()
            
            if not queue_result:
                bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                return
                
            queue_id = queue_result[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
            cursor.execute("SELECT 1 FROM QueueMembers WHERE queue_id = ? AND user_id = ?", 
                          (queue_id, user_id))
            if cursor.fetchone():
                bot.reply_to(message, f"–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            cursor.execute("SELECT MAX(join_order) FROM QueueMembers WHERE queue_id = ?", (queue_id,))
            max_order = cursor.fetchone()[0]
            new_order = 1 if max_order is None else max_order + 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å
            cursor.execute("INSERT INTO QueueMembers (queue_id, user_id, join_order) VALUES (?, ?, ?)", 
                          (queue_id, user_id, new_order))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            connection.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏
            cursor.execute("""
                SELECT u.display_name, qm.join_order 
                FROM QueueMembers qm 
                JOIN Users u ON qm.user_id = u.user_id 
                WHERE qm.queue_id = ? 
                ORDER BY qm.join_order
            """, (queue_id,))
            
            queue_members = cursor.fetchall()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            queue_list = "\n".join([f"{i}. {name}" for name, i in queue_members])
            
            bot.reply_to(message, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'!\n\n–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:\n{queue_list}")
    
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –æ—á–µ—Ä–µ–¥–∏: {str(e)}")
        with db_lock:
            connection.rollback()

@bot.message_handler(commands=['exit'])
def exit_queue(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /exit
        command_parts = message.text.split(' ', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        if len(command_parts) < 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏. –ü—Ä–∏–º–µ—Ä: /exit –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
            return
        
        queue_name = command_parts[1].strip()
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with db_lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
            cursor.execute("SELECT queue_id FROM Queues WHERE queue_name = ? AND chat_id = ?", 
                          (queue_name, chat_id))
            queue_result = cursor.fetchone()
            
            if not queue_result:
                bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                return
                
            queue_id = queue_result[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
            cursor.execute("SELECT join_order FROM QueueMembers WHERE queue_id = ? AND user_id = ?", 
                          (queue_id, user_id))
            member_result = cursor.fetchone()
            
            if not member_result:
                bot.reply_to(message, f"–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.")
                return
            
            user_order = member_result[0]
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            cursor.execute("DELETE FROM QueueMembers WHERE queue_id = ? AND user_id = ?", 
                          (queue_id, user_id))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            cursor.execute("""
                UPDATE QueueMembers 
                SET join_order = join_order - 1 
                WHERE queue_id = ? AND join_order > ?
            """, (queue_id, user_order))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            connection.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏
            cursor.execute("""
                SELECT u.display_name, qm.join_order 
                FROM QueueMembers qm 
                JOIN Users u ON qm.user_id = u.user_id 
                WHERE qm.queue_id = ? 
                ORDER BY qm.join_order
            """, (queue_id,))
            
            queue_members = cursor.fetchall()
            
            if queue_members:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                queue_list = "\n".join([f"{i}. {name}" for name, i in queue_members])
                bot.reply_to(message, f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.\n\n–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å:\n{queue_list}")
            else:
                bot.reply_to(message, f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'.\n–û—á–µ—Ä–µ–¥—å —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞.")
    
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {str(e)}")
        with db_lock:
            connection.rollback()

@bot.message_handler(commands=['delete'])
def delete_queue(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /delete
        command_parts = message.text.split(' ', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        if len(command_parts) < 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏. –ü—Ä–∏–º–µ—Ä: /delete –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
            return
        
        queue_name = command_parts[1].strip()
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
        chat_member = bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['administrator', 'creator']:
            bot.reply_to(message, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –æ—á–µ—Ä–µ–¥–∏.")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with db_lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
            cursor.execute("SELECT queue_id FROM Queues WHERE queue_name = ? AND chat_id = ?", 
                          (queue_name, chat_id))
            queue_result = cursor.fetchone()
            
            if not queue_result:
                bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                return
                
            queue_id = queue_result[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            cursor.execute("SELECT COUNT(*) FROM QueueMembers WHERE queue_id = ?", (queue_id,))
            members_count = cursor.fetchone()[0]
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏
            cursor.execute("DELETE FROM QueueMembers WHERE queue_id = ?", (queue_id,))
            
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—É –æ—á–µ—Ä–µ–¥—å
            cursor.execute("DELETE FROM Queues WHERE queue_id = ?", (queue_id,))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            connection.commit()
            
            bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. –ë—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ {members_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏: {str(e)}")
        with db_lock:
            connection.rollback()

@bot.message_handler(commands=['view'])
def view_queue(message):
    try:
        chat_id = message.chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /view
        command_parts = message.text.split(' ', 1)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with db_lock:
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ /view –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π –≤ –≥—Ä—É–ø–ø–µ
            if len(command_parts) < 2 or not command_parts[1].strip():
                cursor.execute("""
                    SELECT q.queue_name, COUNT(qm.user_id) as members_count 
                    FROM Queues q 
                    LEFT JOIN QueueMembers qm ON q.queue_id = qm.queue_id 
                    WHERE q.chat_id = ? 
                    GROUP BY q.queue_id, q.queue_name
                    ORDER BY q.queue_name
                """, (chat_id,))
                
                queues = cursor.fetchall()
                
                if not queues:
                    bot.reply_to(message, "–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ—á–µ—Ä–µ–¥–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create.")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—á–µ—Ä–µ–¥–µ–π
                queues_list = "\n".join([f"üìã {name} - {count} —É—á–∞—Å—Ç–Ω–∏–∫(–æ–≤)" for name, count in queues])
                
                bot.reply_to(message, f"–°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ:\n\n{queues_list}\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /view [–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏]")
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏, –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π
            else:
                queue_name = command_parts[1].strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
                cursor.execute("SELECT queue_id FROM Queues WHERE queue_name = ? AND chat_id = ?", 
                              (queue_name, chat_id))
                queue_result = cursor.fetchone()
                
                if not queue_result:
                    bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                    return
                    
                queue_id = queue_result[0]
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –æ—á–µ—Ä–µ–¥–∏
                cursor.execute("""
                    SELECT u.display_name 
                    FROM Queues q 
                    JOIN Users u ON q.creator_id = u.user_id 
                    WHERE q.queue_id = ?
                """, (queue_id,))
                creator_name = cursor.fetchone()[0]
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏
                cursor.execute("""
                    SELECT u.display_name, u.username, qm.join_order 
                    FROM QueueMembers qm 
                    JOIN Users u ON qm.user_id = u.user_id 
                    WHERE qm.queue_id = ? 
                    ORDER BY qm.join_order
                """, (queue_id,))
                
                queue_members = cursor.fetchall()
                
                if not queue_members:
                    bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –ø—É—Å—Ç–∞. –°–æ–∑–¥–∞—Ç–µ–ª—å: {creator_name}")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                queue_list = "\n".join([
                    f"{i}. {name} (@{username})" if username else f"{i}. {name}"
                    for name, username, i in queue_members
                ])
                
                bot.reply_to(message, f"–û—á–µ—Ä–µ–¥—å '{queue_name}'\n–°–æ–∑–¥–∞—Ç–µ–ª—å: {creator_name}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(queue_members)}\n\n{queue_list}")
    
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—á–µ—Ä–µ–¥–∏: {str(e)}")

@bot.message_handler(commands=['setname'])
def set_custom_name(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /setname
        command_parts = message.text.split(' ', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –Ω–æ–≤–æ–µ –∏–º—è
        if len(command_parts) < 2:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è. –ü—Ä–∏–º–µ—Ä: /setname –ò–≤–∞–Ω")
            return
        
        new_name = command_parts[1].strip()
        user_id = message.from_user.id
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with db_lock:
            cursor.execute("UPDATE Users SET display_name = ? WHERE user_id = ?", 
                          (new_name, user_id))
            connection.commit()
            
        bot.reply_to(message, f"–í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_name}'!")
    
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: {str(e)}")
        with db_lock:
            connection.rollback()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()